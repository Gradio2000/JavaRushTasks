taskKey="com.javarush.task.task34.task3410.big05"\n\nSokoban (5)

Игровые объекты “Ящик” и “Игрок” с одной стороны являются объектами, которые могут
сталкиваться, а с другой они могут перемещаться по полю.
5.1. Создай класс игрока Player и класс ящика Box в пакете model. Каждый из них
унаследуй от максимально подходящего класса.
5.2. Созданные классы должны поддерживать интерфейс, отвечающий за движение
объектов.
5.3. Добавь в созданные классы конструкторы, принимающие int x и int y.
5.4. В каждом из классов, реализуй метод, отвечающий за движение. Он должен смещать
координаты объектов (x и y) на переданные значения.
5.5. В каждом из них, реализуй метод, отвечающий за отрисовку. Этот метод должен:
устанавливать какой-то цвет и рисовать какие-то примитивные фигуры. Проследи,
чтобы центр фигуры имел координаты x и y, а высота и ширина соответствовали
значениям полей height и width.
Подсказка: игрока можешь нарисовать желтым залитым кругом, а ящик – оранжевым
квадратом с прорисованными диагоналями. Это пример, ты можешь сам выбрать цвет
и вид каждого объекта, ты ограничен только методами доступными для Graphics и
своей фантазией.

Для того чтобы проверить как рисуется твой ящик или игрок, ты можешь создать
объект типа Box или Player в методе paint() класса Field и вызвать у объекта метод
draw(). Сделай это исключительно для проверки методов draw(), в дальнейшем метод
paint() мы реализуем иначе.


Требования:
1.	Создай класс игрока Player и класс ящика Box в пакете model. Каждый из них унаследуй от максимально подходящего класса.
2.	Классы Player и Box должны поддерживать интерфейс, отвечающий за движение объектов.
3.	Добавь в классы Player и Box конструкторы, принимающие int x и int y.
4.	В классах Player и Box реализуй метод, отвечающий за движение. Он должен смещать координаты объектов (x и y) на переданные значения.
5.	В классах Player и Box реализуй метод, отвечающий за отрисовку.


Sokoban (5)

Игровые объекты “Ящик” и “Игрок” с одной стороны являются объектами, которые могут
сталкиваться, а с другой они могут перемещаться по полю.
5.1. Создай класс игрока Player и класс ящика Box в пакете model. Каждый из них
унаследуй от максимально подходящего класса.
5.2. Созданные классы должны поддерживать интерфейс, отвечающий за движение
объектов.
5.3. Добавь в созданные классы конструкторы, принимающие int x и int y.
5.4. В каждом из классов, реализуй метод, отвечающий за движение. Он должен смещать
координаты объектов (x и y) на переданные значения.
5.5. В каждом из них, реализуй метод, отвечающий за отрисовку. Этот метод должен:
устанавливать какой-то цвет и рисовать какие-то примитивные фигуры. Проследи,
чтобы центр фигуры имел координаты x и y, а высота и ширина соответствовали
значениям полей height и width.
Подсказка: игрока можешь нарисовать желтым залитым кругом, а ящик – оранжевым
квадратом с прорисованными диагоналями. Это пример, ты можешь сам выбрать цвет
и вид каждого объекта, ты ограничен только методами доступными для Graphics и
своей фантазией.

Для того чтобы проверить как рисуется твой ящик или игрок, ты можешь создать
объект типа Box или Player в методе paint() класса Field и вызвать у объекта метод
draw(). Сделай это исключительно для проверки методов draw(), в дальнейшем метод
paint() мы реализуем иначе.



Sokoban (5)

Игровые объекты “Ящик” и “Игрок” с одной стороны являются объектами, которые могут
сталкиваться, а с другой они могут перемещаться по полю.
5.1. Создай класс игрока Player и класс ящика Box в пакете model. Каждый из них
унаследуй от максимально подходящего класса.
5.2. Созданные классы должны поддерживать интерфейс, отвечающий за движение
объектов.
5.3. Добавь в созданные классы конструкторы, принимающие int x и int y.
5.4. В каждом из классов, реализуй метод, отвечающий за движение. Он должен смещать
координаты объектов (x и y) на переданные значения.
5.5. В каждом из них, реализуй метод, отвечающий за отрисовку. Этот метод должен:
устанавливать какой-то цвет и рисовать какие-то примитивные фигуры. Проследи,
чтобы центр фигуры имел координаты x и y, а высота и ширина соответствовали
значениям полей height и width.
Подсказка: игрока можешь нарисовать желтым залитым кругом, а ящик – оранжевым
квадратом с прорисованными диагоналями. Это пример, ты можешь сам выбрать цвет
и вид каждого объекта, ты ограничен только методами доступными для Graphics и
своей фантазией.

Для того чтобы проверить как рисуется твой ящик или игрок, ты можешь создать
объект типа Box или Player в методе paint() класса Field и вызвать у объекта метод
draw(). Сделай это исключительно для проверки методов draw(), в дальнейшем метод
paint() мы реализуем иначе.



Sokoban (5)

Игровые объекты “Ящик” и “Игрок” с одной стороны являются объектами, которые могут
сталкиваться, а с другой они могут перемещаться по полю.
5.1. Создай класс игрока Player и класс ящика Box в пакете model. Каждый из них
унаследуй от максимально подходящего класса.
5.2. Созданные классы должны поддерживать интерфейс, отвечающий за движение
объектов.
5.3. Добавь в созданные классы конструкторы, принимающие int x и int y.
5.4. В каждом из классов, реализуй метод, отвечающий за движение. Он должен смещать
координаты объектов (x и y) на переданные значения.
5.5. В каждом из них, реализуй метод, отвечающий за отрисовку. Этот метод должен:
устанавливать какой-то цвет и рисовать какие-то примитивные фигуры. Проследи,
чтобы центр фигуры имел координаты x и y, а высота и ширина соответствовали
значениям полей height и width.
Подсказка: игрока можешь нарисовать желтым залитым кругом, а ящик – оранжевым
квадратом с прорисованными диагоналями. Это пример, ты можешь сам выбрать цвет
и вид каждого объекта, ты ограничен только методами доступными для Graphics и
своей фантазией.

Для того чтобы проверить как рисуется твой ящик или игрок, ты можешь создать
объект типа Box или Player в методе paint() класса Field и вызвать у объекта метод
draw(). Сделай это исключительно для проверки методов draw(), в дальнейшем метод
paint() мы реализуем иначе.



Sokoban (5)

Игровые объекты “Ящик” и “Игрок” с одной стороны являются объектами, которые могут
сталкиваться, а с другой они могут перемещаться по полю.
5.1. Создай класс игрока Player и класс ящика Box в пакете model. Каждый из них
унаследуй от максимально подходящего класса.
5.2. Созданные классы должны поддерживать интерфейс, отвечающий за движение
объектов.
5.3. Добавь в созданные классы конструкторы, принимающие int x и int y.
5.4. В каждом из классов, реализуй метод, отвечающий за движение. Он должен смещать
координаты объектов (x и y) на переданные значения.
5.5. В каждом из них, реализуй метод, отвечающий за отрисовку. Этот метод должен:
устанавливать какой-то цвет и рисовать какие-то примитивные фигуры. Проследи,
чтобы центр фигуры имел координаты x и y, а высота и ширина соответствовали
значениям полей height и width.
Подсказка: игрока можешь нарисовать желтым залитым кругом, а ящик – оранжевым
квадратом с прорисованными диагоналями. Это пример, ты можешь сам выбрать цвет
и вид каждого объекта, ты ограничен только методами доступными для Graphics и
своей фантазией.

Для того чтобы проверить как рисуется твой ящик или игрок, ты можешь создать
объект типа Box или Player в методе paint() класса Field и вызвать у объекта метод
draw(). Сделай это исключительно для проверки методов draw(), в дальнейшем метод
paint() мы реализуем иначе.



